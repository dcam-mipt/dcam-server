/*eslint-disable no-unused-vars*/
const axios = require(`axios`)
const Telegraf = require('telegraf')
const config = require('./config')
const Telegram = require('telegraf/telegram')
const Parse = require(`parse/node`)
const moment = require('moment-timezone')

const telegram = new Telegram(config.TELEGRAM_TOKEN)
const bot = new Telegraf(config.TELEGRAM_TOKEN)
Parse.initialize(config.PARSE_APP_ID, config.PARSE_JS_KEY, config.PARSE_MASTER_KEY);
Parse.serverURL = config.PARSE_SERVER_URL

let openClient = () => {
    let client = new Parse.LiveQueryClient({
        applicationId: config.PARSE_APP_ID,
        serverURL: config.PARSE_WS_URL,
        javascriptKey: config.PARSE_JS_KEY,
        masterKey: config.PARSE_MASTER_KEY
    });
    client.open()
    // error is here
    return client
}
let client = openClient()
let subscribe = (className, method, action) => {
    client.subscribe(new Parse.Query(className)).on(method, (object) => { action(object) })
}

let auth_command = () => {
    let auth_mode = false
    bot.command('auth', (ctx) => {
        auth_mode = true
        ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É (–Ω–∞ –¥–æ–º–µ–Ω–µ @phystech.edu)`)
        bot.on(`text`, (mail_answer) => {
            console.log(`< < <`, mail_answer.update.message.from.id, mail_answer.update.message.from.username);
            if (auth_mode) {
                let mail = mail_answer.update.message.text
                mail.indexOf(`@`) && axios.get(`http://dcam.pro/api/auth/create_verificatoin_pass/${mail}/${mail_answer.update.message.from.id}/${mail_answer.update.message.from.username}`)
                    .then((d) => {
                        switch (d.data) {
                            case `already connected`: mail_answer.reply(`–ê–∫–∫–∞—É–Ω—Ç —Å —ç—Ç–æ–π –ø–æ—á—Ç–æ–π —É–∂–µ —Å–≤—è–∑–∞–Ω —Å telegram. –ï—Å–ª–∏ —ç—Ç–æ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç - –Ω–∞–∂–º–∏—Ç–µ "–∑–∞–±—ã—Ç—å —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç" –≤ –ø—Ä–æ—Ñ–∏–ª–µ –Ω–∞ —Å–∞–π—Ç–µ, –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É`); break;
                            case `wrong email`: mail_answer.reply(`–ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–æ–π –ø–æ—á—Ç–æ–π`); break;
                            default: mail_answer.reply(`üîó –û—Ç–∫—Ä–æ–π—Ç–µ –æ–∫–Ω–æ –í–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ - ${d.data}. –ù–µ —Å–æ–æ–±—â–∞–π—Ç–µ –µ–≥–æ –Ω–∏–∫–æ–º—É. –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è - 60 —Å–µ–∫—É–Ω–¥.`)
                        }
                        auth_mode = false
                    })
            }
        })
    })
}

// bot.on(`text`, (message) => {
//     telegram.sendMessage(227992175, `${message.update.message.from.username}\n\n${message.update.message.text}`)
// })

auth_command()

let days_of_week_short = [`–ø–Ω`, `–≤—Ç`, `—Å—Ä`, `—á—Ç`, `–ø—Ç`, `—Å–±`, `–≤—Å`]

let create_notification = async (user_id, message, delivery_timestamp) => await new Parse.Object(`Notifications`)
    .set(`delivery_timestamp`, delivery_timestamp ? delivery_timestamp : +moment().tz(`Europe/Moscow`))
    .set(`status`, `delayed`)
    .set(`user_id`, user_id)
    .set(`message`, message)
    .save()

telegram.sendMessage(227992175, `deployed.`)
subscribe(`Laundry`, `create`, async (laundry) => {
    let user = await new Parse.Query(`User`).equalTo(`objectId`, laundry.get(`user_id`)).first()
    if (user.get(`telegram`)) {
        let machines = await new Parse.Query(`Machines`).find()
        telegram.sendMessage(user.get(`telegram`).id, `üß∫ –°—Ç–∏—Ä–∫–∞ –∫—É–ø–ª–µ–Ω–∞\n–î–∞—Ç–∞: ${days_of_week_short[moment(+laundry.get(`timestamp`)).tz(`Europe/Moscow`).isoWeekday() - 1]} ${moment(+laundry.get(`timestamp`)).tz(`Europe/Moscow`).format(`DD.MM.YY`)}\n–í—Ä–µ–º—è: ${moment(+laundry.get(`timestamp`)).tz(`Europe/Moscow`).format(`HH:mm`)}\n–ú–∞—à–∏–Ω–∫–∞: ${machines.map(i => i.id).indexOf(laundry.get(`machine_id`)) + 1}\n–¶–µ–Ω–∞: ${laundry.get(`book_cost`)}—Ä`)
    }
})

subscribe(`Laundry`, `delete`, async (laundry) => {
    let user = await new Parse.Query(`User`).equalTo(`objectId`, laundry.get(`user_id`)).first()
    if (user.get(`telegram`)) {
        let machines = await new Parse.Query(`Machines`).find()
        telegram.sendMessage(user.get(`telegram`).id, `üß∫ –°—Ç–∏—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∞\n–î–∞—Ç–∞: ${days_of_week_short[moment(+laundry.get(`timestamp`)).tz(`Europe/Moscow`).isoWeekday() - 1]} ${moment(+laundry.get(`timestamp`)).tz(`Europe/Moscow`).format(`DD.MM.YY`)}\n–í—Ä–µ–º—è: ${moment(+laundry.get(`timestamp`)).tz(`Europe/Moscow`).format(`HH:mm`)}\n–ú–∞—à–∏–Ω–∫–∞: ${machines.map(i => i.id).indexOf(laundry.get(`machine_id`)) + 1}\n–¶–µ–Ω–∞: ${laundry.get(`book_cost`)}—Ä`)
    }
})

subscribe(`Balance`, `update`, async (balance) => {
    let user = await new Parse.Query(`User`).equalTo(`objectId`, balance.get(`user_id`)).first()
    await create_notification(user.id, `üí≥ –ù–æ–≤—ã–π—ã –±–∞–ª–∞–Ω—Å: ${balance.get(`money`)}—Ä`)
})

let create_notifications_queue = async () => {
    let notifications = await new Parse.Query(`Notifications`).equalTo(`status`, `delayed`).find()
    notifications.map(async notification => {
        let user = await new Parse.Query(`User`).equalTo(`objectId`, notification.get(`user_id`)).first()
        let delay = +moment(notification.get(`delivery_timestamp`)).tz(`Europe/Moscow`) - +moment().tz(`Europe/Moscow`)
        if (user.get(`telegram`)) {
            setTimeout(async () => {
                telegram.sendMessage(user.get(`telegram`).id, notification.get(`message`))
                await notification.set(`status`, `sent`).save()
            }, delay > 0 ? delay : 0)
        }
        return delay
    })
}

subscribe(`Notifications`, `create`, async (notification) => {
    let user = await new Parse.Query(`User`).equalTo(`objectId`, notification.get(`user_id`)).first()
    let delay = +moment(notification.get(`delivery_timestamp`)).tz(`Europe/Moscow`) - +moment().tz(`Europe/Moscow`)
    if (user.get(`telegram`)) {
        setTimeout(async () => {
            telegram.sendMessage(user.get(`telegram`).id, notification.get(`message`))
            await notification.set(`status`, `sent`).save()
        }, delay > 0 ? delay : 0)
    }
})

create_notifications_queue()

bot.start((ctx) => ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n –û—Ç–ø—Ä–∞–≤—å—Ç–µ /auth'))
bot.launch()
/*eslint-enable no-unused-vars*/